from typing import override

import torch
from torch import Tensor

from pamiq_core import Environment


class EncodingCheckEnv(Environment[Tensor, Tensor]):
    """Environment used for this sample.

    Args:
        feature_size (int): The size of the input feature vector.
    """

    # In this VAE example, the environment is used to...
    # 1. provide a training data (zero tensor) as an observation,
    # 2. check that the latent dimension is smaller than feature size. (done in `affect()`)

    def __init__(self, feature_size: int) -> None:
        """Initialize the environment with a feature size."""
        super().__init__()

        self.feature_size = feature_size

    @override
    def observe(self) -> Tensor:
        """Get the current observation from the environment.

        In this example, `observe()` provides a training data (zero tensor).

        Returns:
            Tensor: The current observation tensor (zero tensor).
        """
        # In this VAE example, `observe()` returns a sample from the training data,
        # which is represented as a zero tensor for simplicity.
        #
        # In typical reinforcement learning, `observe()` provides the current state or observation.
        # Here, since the environment is used for VAE training, it serves to supply a training sample.
        # For demonstration purposes, the training data is a zero tensor of the specified feature size.

        return torch.zeros(self.feature_size)

    @override
    def affect(self, action: Tensor) -> None:
        """Change the (possibly hidden) state of the environment from the given
        action.

        In this example, `affect()` does not change the state of the environment
        and only checks that the dim. of action tensor (latent representation) is smaller than the feature size.

        Args:
            action (Tensor): The action tensor to affect the environment (latent rep'n. generated by Encoder).
        """
        # In this VAE example, this function does not change the state of the environment.
        #
        # In typical reinforcement learning environments, `affect()` updates the environment's state
        # based on the provided action. However, in `EncodingCheckEnv`, there is no internal state
        # to update, so this method does not perform any state changes.
        #
        # In this example, this function serves as an auxiliary check for the latent representation
        # produced by the VAE. It receives the latent vector as an argument (generated by the
        # `EncodingAgent` in `agent.py`) and ensures its dimensionality is appropriate.

        # Check dimension of latent representation of VAE
        assert (
            action.shape[-1] < self.feature_size
        ), "Action tensor (latent rep'n.) must be smaller than feature_size."
